#+OPTIONS: toc:nil
#+BEGIN_HTML
---
layout: post
title: My First Post **Draft**
excerpt: This first blog post details how I set up org-mode and Github pages to blog.
---
#+END_HTML

** {{ page.title }}
I have decided that it is high time to engage in the creation of a blog. I hope to share ideas and practical experiences
that are helpful to others. My primary driver, though, is a desire to connect more fully with the amazing community of
Clojure hackers and other folks who have so greatly enhanced my own life, by sharing freely of their awesomeness.

My hope is that maintaining a blog will imbue this vague desire with some discipline, and that I will start taking the time and effort
to engage in venues where blog posts might be read by others.

The first post-worthy adventure I have found myself on is actually setting myself up with a blog that is
easy enough for me to maintain that I might *actually do it*. I ended up using a combination of:

   - Github Pages for hosting
   - Org-mode and org-export-md to produce content, and
   - A local Jekyll install running in auto-refresh mode for content development and testing

It has taken some work, but now that it's set up, I find it super-easy and fun to use. In this post, I will detail how I got it that way.

** Using Github Pages and Jekyll to serve up Markdown
   There is some documentation at [[http://github.io/][Github's Pages site]], however after a bunch of trial and error I found [[http://24ways.org/2013/get-started-with-github-pages/][this great writeup by Anna Debenham]]
   which summarizes all the steps I ended up taking to get from Github's instructions to what I wanted, which was to locally preview posts
   and then push them to be served when I am happy with them.

   One thing I find useful that's not mentioned in the writeup above, but is in [[http://jekyllrb.com/docs/drafts/][the Jekyll docs]], is how to work with /drafts/, posts that
   live in a =_drafts/= directory, and can be saved, committed and pushed (possibly for an editing pass or collaborative writing)
   without being posted to the site. In order to preview draft posts, add ~--drafts~ to your ~jekyll serve --watch~ command.

** Using Org-mode and org-export-md
   So, now you have a repo set up where you can work with Markdown (or Textile or HTML files) and serve up static HTML. The next step is to
   get from org-mode outlines to the Markdown output that Jekyll needs to do its work. Org-mode has a Markdown exporter available, in my
   setup I had had to add to my ~emacs.d~ to put it in the export menu by default:

   ~;; Add markdown export mode to org defaults~

   ~(setq org-export-backends (cons 'md' 'org-export-backends))~

   - =#+OPTIONS: toc:nil= to suppress HTML TOC in Markdown files
   - YAML front-matter goes in ~#+BEGIN_HTML ... #+END_HTML~ block
   - Add Markdown to default output by putting <command> somewhere your init.el will see it
   - org/.org -> ~_drafts/*.md~ -> ~_posts/*.md~ when happy with output
** Running Jekyll locally
   - github-pages gemset
   - ~bundle exec jekyll serve --watch --drafts~ in a shell window/screen
